#!/usr/bin/env python

import datetime

TEMPLATE = """/* Generated by linemapheader.py on {0} */

enum map_feature_type {{ WALL, TOP, BOTTOM, RAMPUP, RAMPDOWN }};
enum map_orientation {{ VERTICAL, HORIZONTAL }};
enum map_cardinal_direction {{ NORTH, SOUTH, EAST, WEST }};

struct map_feature {{
    enum map_feature_type type;
    enum map_orientation orientation;
    int coord;
    int low_endpoint;
    int high_endpoint;
}};

struct map_ramp {{
    int x, y;
    enum map_cardinal_direction onramp;
    enum map_cardinal_direction offramp;
}};

struct target {{
    int x, y;
}};

struct map_map {{
    int nfeatures;
    struct map_feature * features;
    
    int nramps;
    struct map_ramp * ramps;

    struct target t;
}};

struct map_feature mapFeatures[{1}] = {{
    {2}
}};

struct map_ramp mapRamps[{3}] = {{
    {4}
}};

struct map_map mapMap = {{
    .nfeatures = {1},
    .features = mapFeatures,

    .nramps = {3},
    .ramps = mapRamps,
    
    .t = {5}
}};
"""

def lines_from_coords(cs):
    n = len(cs)
    lines = []
    for i, c in enumerate(cs):
        ax, ay = c
        bx, by = cs[(i + 1) % n]

        if ax == bx:
            lines.append(("VERTICAL", ax, min(ay, by), max(ay, by), "WALL"))
        elif ay == by:
            lines.append(("HORIZONTAL", ay, min(ax, bx), max(ax, bx), "WALL"))
        else:
            raise Exception("Confused about coordinates {0} and {1}, which " +
                    "appear to be adjacent but not orthogonal".format(
                        c, cs[(i + 1) %n]))
    return lines


def lines_from_ramps(rs):
    lines = []
    for (center, _, _) in rs:
        lines.append(("VERTICAL", center[0]-1, center[1]-1, center[1]+1, "TOP")) # left top
        lines.append(("HORIZONTAL", center[1]+1, center[0]-1, center[0]+1, "TOP")) # north top
        lines.append(("VERTICAL", center[0]+1, center[1]-1, center[1]+1, "TOP")) # right top
        lines.append(("HORIZONTAL", center[1]-1, center[0]-1, center[0]+1, "TOP")) # south top

        lines.append(("HORIZONTAL", center[1]+1, center[0]-4, center[0]-1, "RAMPUP"))
        lines.append(("HORIZONTAL", center[1]-1, center[0]-4, center[0]-1, "RAMPUP"))
        lines.append(("VERTICAL", center[0]+1, center[1]-4, center[1]-1, "RAMPUP"))
        lines.append(("VERTICAL", center[0]-1, center[1]-4, center[1]-1, "RAMPUP"))

        lines.append(("HORIZONTAL", center[1]+1, center[0]+4, center[0]+1, "RAMPDOWN"))
        lines.append(("HORIZONTAL", center[1]-1, center[0]+4, center[0]+1, "RAMPDOWN"))
        lines.append(("VERTICAL", center[0]+1, center[1]-4, center[1]-1, "RAMPDOWN"))
        lines.append(("VERTICAL", center[0]-1, center[1]-4, center[1]-1, "RAMPDOWN"))

        lines.append(("VERTICAL", center[0]-1, center[1]-1, center[1]+1, "TOP")) # left top
        lines.append(("HORIZONTAL", center[1]+1, center[0]-1, center[0]+1, "TOP")) # north top
        lines.append(("VERTICAL", center[0]+1, center[1]-1, center[1]+1, "TOP")) # right top
        lines.append(("HORIZONTAL", center[1]-1, center[0]-1, center[0]+1, "TOP")) # south top

    return lines

def linestruct_from_line(l):
    template = """
    {{
        .orientation = {0},
        .coord = {1},
        .low_endpoint = {2},
        .high_endpoint = {3},
        .type = {4}
    }}"""
    return template.format(*l)

def rampstruct_from_ramp(r):
    template = """
    {{
        .x = {0},
        .y = {1},
        .onramp = {2},
        .offramp = {3}
    }}"""

    ondirections = {(0, 1): "SOUTH",
                    (0, -1): "NORTH",
                    (1, 0): "EAST",
                    (-1, 0): "WEST"}

    offdirections = {(0, 1): "NORTH",
                     (0, -1): "SOUTH",
                     (1, 0): "WEST",
                     (-1, 0): "EAST"}
    
    return template.format(r[0][0], r[0][1], ondirections[r[1]], offdirections[r[2]])


if __name__ == "__main__":
    ncoords = int(raw_input())
    coords = []
    for i in range(ncoords):
        coords.append(tuple(int(i) for i in raw_input().split()))

    nramps = int(raw_input())
    ramps = []
    for i in range(nramps):
        center = tuple(int(i) for i in raw_input().split())
        onx, ony = tuple(int(i) for i in raw_input().split())
        offx, offy = tuple(int(i) for i in raw_input().split())
        ramps.append((center, (onx, ony), (offx, offy)))

    target = tuple(int(i) for i in raw_input().split())
    linestructlist = [linestruct_from_line(val) for val in lines_from_coords(coords)]
    linestructlist.extend([linestruct_from_line(val) for val in lines_from_ramps(ramps)])
    linestructlist = ",\n".join(linestructlist)

    rampstructlist = ",\n".join([rampstruct_from_ramp(val) for val in ramps])

    targetformat = """{{
        .x = {0},
        .y = {1}
    }}
    """
    
    print TEMPLATE.format(datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y"),
                          ncoords + nramps*16,
                          linestructlist,
                          nramps,
                          rampstructlist,
                          targetformat.format(target[0], target[1]))
